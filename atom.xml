<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[My Octopress Blog]]></title>
  <link href="http://musicpop.github.io/atom.xml" rel="self"/>
  <link href="http://musicpop.github.io/"/>
  <updated>2016-03-25T16:40:33+08:00</updated>
  <id>http://musicpop.github.io/</id>
  <author>
    <name><![CDATA[Your Name]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Spring AOP Aspect]]></title>
    <link href="http://musicpop.github.io/blog/2016/03/25/spring-aop-aspect/"/>
    <updated>2016-03-25T10:52:14+08:00</updated>
    <id>http://musicpop.github.io/blog/2016/03/25/spring-aop-aspect</id>
    <content type="html"><![CDATA[<h2>AOP的实现中，会有代码织入（weaver）的概念，根据织入的时间节点不同，可以分为四种：</h2>

<p>Compile-time weaving：当你完成了源代码的编写，利用Aspectj的ajc命令，以source code为输入，输出织入好的class文件。
Post-compile weaving：是为了weaver已经存在的class文件和Jar文件，这发生在使用或部署程序之前
Load-time weaving (LTW)：这个过程，直到使用classloader加载class文件时才发生，所以在运行环境中要存在“weaving class loader”或者使用一个织入代理
run-time weaving：这个过程发生时，class已经在JVM中有定义，织入时无需再加载class.像Spring AOP这种纯AOP框架使用的是run-time weaving.</p>

<h2>Aspectj支持前三种织入方式</h2>

<p>使用AspectJ LTW有两个主要步骤，第一，通过JVM的-javaagent参数设置LTW的织入器类包，以代理JVM默认的类加载器；第二，LTW织入器需要一个 aop.xml文件，在该文件中指定切面类和需要进行切面织入的目标类</p>

<h2>Spring AOP不同于大多数其他AOP框架。</h2>

<p>Spring AOP的目的并不是为了提供最完整的AOP实现（虽然Spring AOP具有相当的能力）；而是为了要帮助解决企业应用中的常见问题，提供一个AOP实现与Spring IOC之间的紧密集成。由于Spring AOP是容易实现的，如果你计划在Spring Beans之上将横切关注点模块化，</p>

<p>在决定使用哪种框架实现你的项目之前，有几个要点可以帮助你做出合适的选择（同样适用于其他框架）。</p>

<p>Spring AOP致力于提供一种能够与Spring IoC紧密集成的面向方面框架的实现，以便于解决在开发企业级项目时面临的常见问题。明确你在应用横切关注点(cross-cutting concern)时（例如事物管理、日志或性能评估），需要处理的是Spring beans还是POJO。如果正在开发新的应用，则选择Spring AOP就没有什么阻力。但是如果你正在维护一个现有的应用（该应用并没有使用Spring框架），AspectJ就将是一个自然的选择了。为了详细说明这一点，假如你正在使用Spring AOP，当你想将日志功能作为一个通知(advice)加入到你的应用中，用于追踪程序流程，那么该通知(Advice)就只能应用在Spring beans的连接点(Joinpoint)之上。</p>

<p> spring aop是aop实现方案的一种，它支持在运行期基于动态代理的方式将aspect织入目标代码中来实现aop。但是spring aop的切入点支持有限，而且对于static方法和final方法都无法支持aop（因为此类方法无法生成代理类）</p>

<p> Spring AOP提供了较通用的编写Aspect,pointcuts的方式，使用@Aspect、@Pointcut类似的注解或者XML配置就可以完成面向切面编程，这对于你是使用Spring AOP还是使用Aspectj都是一致生效的。</p>

<h2>下面是AOP的一些基本概念，转载自<a href="http://jinnianshilongnian.iteye.com/blog/1474325">http://jinnianshilongnian.iteye.com/blog/1474325</a></h2>

<h3>AOP入门</h3>

<h4>关注点：</h4>

<p>可以是所关注的任何东西，比如支付、日志及、事物</p>

<h4>关注点分离</h4>

<p>将问题细化为单独的部分，即可以理解为不可再分割的组件，如日志组件和支付组件</p>

<h4>横切关注点：会在多个模块中出现，使用现有的编程方法，横切关注点会横跨多个模块，结果是使系统难以设计、理解、实现和演进，如日志组件横切与支付组件</h4>

<h4>织入</h4>

<p>横切关注点分离后，需要通过某种技术将横切关注点融合到系统中从而完成需要的功能，因此需要织入</p>

<h3>Aop是什么</h3>

<p>AOP是一种编程范式，提供了另一个角度来考虑程序结构以完善面向对象编程（OOP）
AOP为开发者提供了一种描述横切关注点的机制，并能够自动将横切关注点织入到面向对象的软件系统中，从而实现横切关注点的模块化
AOP能够将那些与业务无关，却为业务模块共同调用的逻辑或责任，例如事物管理、日志管理、权限管理等，封装起来，以减少系统的重复代码，降低模块间的耦合度，并有利于未来的可操作性和可维护性</p>

<h3>AOP能干什么，及好处</h3>

<p>降低模块的耦合度
使系统容易扩展
设计决定的迟绑定：可以把这方面的需求作为独立的方面来实现
更好的代码复用</p>

<h3>AOP基本概念</h3>

<p> 连接点（Joinpoint）：</p>

<pre><code>表示需要在程序中插入横切关注点的扩展点，连接点可能是类初始化、方法执行、方法调用、字段调用或处理异常等等，Spring只支持方法执行连接点，在AOP中表示为“在哪里做”；
</code></pre>

<p>切入点（Pointcut）：</p>

<pre><code>选择一组相关连接点的模式，即可以认为连接点的集合，Spring支持perl5正则表达式和AspectJ切入点模式，Spring默认使用AspectJ语法，在AOP中表示为“在哪里做的集合”；
</code></pre>

<p>增强（Advice）：或称为增强</p>

<pre><code>在连接点上执行的行为，增强提供了在AOP中需要在切入点所选择的连接点处进行扩展现有行为的手段；包括前置增强（before advice）、后置增强 (after advice)、环绕增强 （around advice），在Spring中通过代理模式实现AOP，并通过拦截器模式以环绕连接点的拦截器链织入增强 ；在AOP中表示为“做什么”；
</code></pre>

<p>方面/切面（Aspect）：</p>

<pre><code>  横切关注点的模块化，比如上边提到的日志组件。可以认为是增强、引入和切入点的组合；在Spring中可以使用Schema和@AspectJ方式进行组织实现；在AOP中表示为“在哪里做和做什么集合”；
</code></pre>

<p>目标对象（Target Object）：</p>

<pre><code>需要被织入横切关注点的对象，即该对象是切入点选择的对象，需要被增强的对象，从而也可称为“被增强对象”；由于Spring AOP 通过代理模式实现，从而这个对象永远是被代理对象，在AOP中表示为“对谁做”；
</code></pre>

<p>AOP代理（AOP Proxy）：
    AOP框架使用代理模式创建的对象，从而实现在连接点处插入增强（即应用切面），就是通过代理来对目标对象应用切面。在Spring中，AOP代理可以用JDK动态代理或CGLIB代理实现，而通过拦截器模型应用切面。</p>

<p>织入（Weaving）：
    织入是一个过程，是将切面应用到目标对象从而创建出AOP代理对象的过程，织入可以在编译期、类装载期、运行期进行。</p>

<p>引入（inter-type declaration）：</p>

<pre><code>也称为内部类型声明，为已有的类添加额外新的字段或方法，Spring允许引入新的接口（必须对应一个实现）到所有被代理对象（目标对象）, 在AOP中表示为“做什么（新增什么）”；
</code></pre>

<p>AOP的Advice类型</p>

<p>前置增强（Before advice）：
    在某连接点之前执行的增强，但这个增强不能阻止连接点前的执行（除非它抛出一个异常）。</p>

<p>后置返回增强（After returning advice）：
    在某连接点正常完成后执行的增强：例如，一个方法没有抛出任何异常，正常返回。</p>

<p>后置异常增强（After throwing advice）：
    在方法抛出异常退出时执行的增强。</p>

<p>后置最终增强（After (finally) advice）：
    当某连接点退出的时候执行的增强（不论是正常返回还是异常退出）。</p>

<p>环绕增强（Around Advice）：
    包围一个连接点的增强，如方法调用。这是最强大的一种增强类型。 环绕增强可以在方法调用前后完成自定义的行为。它也会选择是否继续执行连接点或直接返回它们自己的返回值或抛出异常来结束执行。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Dotcms数据-迁移服务器]]></title>
    <link href="http://musicpop.github.io/blog/2015/12/11/dotcms-deploy/"/>
    <updated>2015-12-11T18:11:07+08:00</updated>
    <id>http://musicpop.github.io/blog/2015/12/11/dotcms-deploy</id>
    <content type="html"><![CDATA[<h2>导出本地数据库</h2>

<p><img src="images/dotcms-deploy.png" alt="导出" /></p>

<h2>将数据导入部署机器 数据库</h2>

<p>引用要导入的目标数据库
    (use temp_test_db)</p>

<p>数据库temp_test_db数据库必须存在。
导入命令
source 数据文件目录(source E:\data.sql)
需要一定时间，和导入文件大小相关</p>

<h2>将代码部署到服务器Tomcat目录ROOT目录下</h2>

<h2>修改 ROOT/Meta-info/context.xml 中的连接数据库的用户名及密码</h2>

<h2>如果启动的时候提示分配的内存不足，可以创建setenv.bat文件，输入</h2>

<pre><code>set JAVA_OPTS=-Dfile.encoding=UTF-8 -Xms128m -Xmx1024m
</code></pre>

<p>将这个文件保存在Tomcat bin目录下。这里没有设置 -XX:MaxPermSize，因为在新版本的java中已经移除了此设置。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[DotCMS使用中的问题]]></title>
    <link href="http://musicpop.github.io/blog/2015/12/10/dotcms-upload-file/"/>
    <updated>2015-12-10T09:55:11+08:00</updated>
    <id>http://musicpop.github.io/blog/2015/12/10/dotcms-upload-file</id>
    <content type="html"><![CDATA[<h2>DotCMS如何上传资源</h2>

<p>dotcms 是一个Java开发的功能强大的内容管理系统(CMS)。开源且跨平台，速度和嵌入式脚本语言使dotCMS易于扩充和建构。因为dotCMS使用hibernate来抽象所有的数据访问，数据库移植很方便。目前支持dotCMS数据库,包括:Oracle，PostgreSQL，Microsoft SQL Server，MySQL。dotCMS是一个可扩展的网页内容管理平台。</p>

<p>在使用的过程中，需要上传资源到后台，根据其文档，我使用了cyberduck工具，<a href="https://cyberduck.io/">https://cyberduck.io/</a></p>

<p>新建链接时，端口设置、路径设置都需要正确才可以，见下图：</p>

<p><img src="images/dotcms1.png" alt="小黄鸭" /></p>

<h2>在一次修改代码后，突然出现了下图的错误</h2>

<p><img src="images/dotcms-wenti.png" alt="小黄鸭" /></p>

<p>原来是将velocity模板的‘#‘号符，写在了html的注释里面，本想将其注释掉，但是velocity会先进行解析，解析&#8217;#&lsquo;号符时，自然也就出错了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Vertica 大数据]]></title>
    <link href="http://musicpop.github.io/blog/2015/12/09/vertica-1/"/>
    <updated>2015-12-09T15:19:40+08:00</updated>
    <id>http://musicpop.github.io/blog/2015/12/09/vertica-1</id>
    <content type="html"><![CDATA[<p>【版权所有，禁止转载】</p>

<h2>列式存储</h2>

<p>HP Vertica 存储数据的方式极大的提升了查询的效能。因为它可以极大地减少磁盘i/o ，列存储是读密集型工作负载的理想选择。</p>

<p><img src="images/columnStore.png" alt="列存储" /></p>

<h3>列存储架构中的 FlexStore</h3>

<p>传统数据库被用来 OLTP查询和行存储架构.为了处理一个查询, 行存储区读取指定的表中的所有列, 无论表有多宽或实际上需要多少的列。通常情况下，包含几百列的表解析查询访问只有两列或三列，会导致很多不必要的数据检索。</p>

<p>不像其他 RDBMS 系统, HP Vertica 从数据库对象中读取列，这个对象就是 projections, 在 Physical Schema 中详解. 没有资源被浪费在读取大量的未使用的列。执行引擎使用每个字节的数据。例如，请考虑如下两个表架构：</p>

<p><img src="images/column-2.png" alt="列存储" /></p>

<p>比如你需要执行如下语句:</p>

<pre><code>SELECT A, C, N  
FROM Table1 JOIN Table2 ON H = J;
</code></pre>

<p>对于在结果集中的每一行，行式存储读取 16 列 (A 到 H 和 J 到 Q)物理数据. 使用列式存储，使用一个查询projection只需要读取三列数据: A, C, and N.</p>

<h1>数据编码和压缩</h1>

<p>HP Vertica使用编码和压缩，以优化查询性能和节省存储空间。 然而，在您的HP Vertica数据库，他们有不同的含义。</p>

<h2>编码</h2>

<p>编码是数据转换成标准格式的过程. HP Vertica 使用大量不同的编码策略，具体取决于列的数据类型、 表基数和排序顺序。编码提高了性能，因为在查询执行过程中有更少的磁盘 I/O。此外，您可以在较少的空间存储更多数据。</p>

<h2>压缩</h2>

<p>压缩是将数据转换为一个紧凑的格式的过程。HP Vertica 使用几种不同的压缩方法和自动选择  最好的一个被压缩的数据。</p>

<p>使用压缩，HP Vertica 存储更多数据，提供更多的视图，并比其他数据库使用更少的硬件。 50-90%的压缩率是可能的。使用压缩，可以更多的物理存储历史数据。</p>

<p>数据库的大小，常常受到存储资源的可用性。通常情况下，当数据库超过了其大小限制，管理员对超过一个特定的历史阈值的数据 进 存档。</p>

<p>广泛使用压缩允许列存储占用大幅较少的存储. 在列式存储中, 每一个保存在列projection 中的数据有相同的数据类型. 这样特别利于压缩,特别是在排好序的列中, 行存储中每一行有不同的数据类型, 这导致在使用压缩时的低效。</p>

<p><img src="images/yasuo.png" alt="压缩" /></p>

<h1>集群</h1>

<p>集群用于扩展性和冗余性. 你可以通过添加更多的硬件，很容易扩展数据库群集，并通过在集群间分布和复制数据提高数据库的可用性。</p>

<p><img src="images/jiqun1.png" alt="压缩" />
在集群中数据（特别是列示数据）被分配在不同的节点中, 所以如果一个节点不可用，数据库可以继续运行. 当一个节点添加到群集，或变得不可用后重新联机时，它自动查询来更新其本地数据的其他节点</p>

<p>In HP Vertica, 物理架构旨在使用分布物理存储，对需要计算资源，允许并行查询执行.</p>

<p>最重要的概念是理解 host, instance, node, cluster, and database:</p>

<p>Host —</p>

<p>计算机系统与 32 位 (仅适用于非生产使用) 或 64 位英特尔或 AMD 的处理器、RAM、 硬盘和 TCP/IP 网络接口 (IP 地址和主机名). 主机之间彼此不分享磁盘空间和主内存.</p>

<p>Instance —</p>

<p>一个 HP Vertica 实例 由如下组成： 运行 HP Vertica 进程 和磁盘存储(catalog and data). 一个主机只能安装一个实例.</p>

<p>Node —</p>

<p>A host 配置后运行起来 HP Vertica. 它就成为集群的一员. 为了有能力从一个节点故障恢复数据库，至少需要三个节点. HP建议你使用最小的四个节点.</p>

<p>Cluster —</p>

<p>数据库由多个节点的集合组成. 集群不属于数据库定义的一部分，也没有名字.</p>

<p>Database —</p>

<p>多个节点集群形成的数据库, 当启动时, 可以执行分布式的数据存储和 SQL 语句的执行，通过管理员界面、 交互和编程的用户界面.</p>

<h1>持续的性能</h1>

<p>HP Vertica 在没有数据管理的时候连续的（7*24）查询和加载数据。</p>

<p><img src="images/jiqun2.png" alt="压缩" /></p>

<p>自动数据复制、 故障转移和恢复提供积极的冗余，从而提高性能。节点通过查询系统自动恢复。</p>

<h1>高可用性及数据恢复</h1>

<h2>K-Safety</h2>

<p>K-safety是数据库集群容错措施，示数据在数据库中的数据库群集中存在复制副本的数。这些副本允许其他节点接管失败节点, 允许的数据库继续运行，同时仍能确保数据的完整性. 如果数据库中超过K个节点失效, 数据库中的数据可能变为不可用. 在此情况下, 数据库被认为不安全，并自动关机.</p>

<p>HP Vertica 数据库有可能在 超过K 节点失败的情况下运行. 因为每个数据段至少一个正常运行的群集节点上可用，数据库就能够运行。只要每个失败的节点上的数据从另一个活动节点可用，数据库会继续运行。</p>

<p>K-Safety案例
<img src="images/ksf1.png" alt="压缩" /></p>

<p>上面的图显示了 一级K-safety 5 节点群集。每个节点使用 buddy projections为下一个节点中存储的数据  (节点 1 有节点 2 的buddy projections，节点 2 有节点 3的buddy projections，等等)。任何群集中的节点可能失败，并且数据库将仍然能够继续运行 (虽然以较低的性能，其中一个节点由于要处理自己的工作负载和故障节点的工作量)。</p>

<p><img src="images/ksf2.png" alt="压缩" /></p>

<p>如果节点 2 出现故障，节点 1 使用其副本节点 2 的数据，并执行其本身的作用. 数据库容错能力将下降从 1 到 0，因为单个节点可能会导致数据库变得不安全. 在此示例中，如果节点 1 或节点 3 出现故障，数据库会变得不安全，因为并不是所有的数据将可用。如果节点 1 出现故障，然后节点 2 的数据将不再可用。如果节点 3 出现故障，它的数据将不再可用，因为节点 2 已经不可用. 在这种情况下，节点 1 和 3 是关键节点。在 K-安全等级为 1 的数据库中，包含失败的节点的buddy projection和其buddy projection在失败节点的节点将始终成为关键节点。
<img src="images/ksf3.png" alt="压缩" />
在节点 2 失效下，节点 4 或 5 群集中的可能会失败，数据库会还有所有可用数据。例如，如果节点 4 失败，节点 3 是能够使用其好友预测填写为它. 在此情况下，节点任何进一步失败将导致关闭数据库，因为所有的群集中的节点都现在是关键节点。 (另外，如果更多的一个节点发生故障，一半或更多的节点将失效，需要 HP Vertica 自动关闭，无论如果所有的数据都可用，或不可用.)</p>

<p><img src="images/ksf4.png" alt="压缩" /></p>

<p>在 K-safety 级别为 2 的数据库中, node 2失败后，任何其他节点还可以失败，数据库将能够继续运行. 例如，如果在 5 个节点的群集中的每个节点包含其邻居 (例如，节点 1 所载节点 5 和节点 2  的buddy projections  )，那么节点 2 和 3 如同时失败，数据库可以继续运行. Node 1 能作为 node 2的备份, and node 4 能作为 node 3 的备份. 由于要求，一半或更多节点群集中的不可用时数据库不能继续运行，如果节点 5 出现故障，即使节点 1 和 4 有数据的buddy projections，集群也不能继续运行。</p>

<h3>K-Safety 要求</h3>

<p>你的数据库必须有最低数量的节点能够有 K-安全级别大于零，如下表中所示.:</p>

<table>
<thead>
<tr>
<th> K-level&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;-</th>
<th style="text-align:center;"> Number of Nodes Required   </th>
</tr>
</thead>
<tbody>
<tr>
<td> 0              </td>
<td style="text-align:center;"> 1+                             </td>
</tr>
<tr>
<td> 1              </td>
<td style="text-align:center;"> 3+                             </td>
</tr>
<tr>
<td> 2              </td>
<td style="text-align:center;"> 5+                             </td>
</tr>
<tr>
<td> k              </td>
<td style="text-align:center;"> 2k+1                               </td>
</tr>
</tbody>
</table>


<p>HP Vertica 不支持 K值 大于2</p>

<h2>Hybrid 存储模型</h2>

<p>了支持数据操作(DML)命令 (INSERT, UPDATE, and DELETE) and 批量加载操作 (COPY命令), 或者在一个混合使用这两种操作的数据仓库工作负荷中, HP Vertica 实现的存储模型如下图所示. 这个模型 在每个 HP Vertica 节点中是一样的.</p>

<p><img src="images/hybrid.png" alt="Hybrid 存储模型" /></p>

<p>Write Optimized Store (WOS) 是驻留在内存中数据结构用于存储插入、 更新、 删除和复制 (离不开直接提示) 动作. 就像 Read Optimized Store (ROS), the WOS 由 projection安排. 为了支持非常快的数据加载速度，wos存储无数据压缩或索引的记录。 在 WOS中的 projection 只有当查询的时候排序，只要没有进一步的数据插入到它，它一直是排序的.</p>

<p>The Tuple Mover &trade; 是 HP Vertica 数据库优化组件：其 移动数据从WOS到ROS. The TM also 联合小的 ROS 容器到一个大的容器, 并清理删除的数据. 在操作期间，TM 也是负责处于存储位置的存储策略.</p>

<p>The Read Optimized Store (ROS) 是高度优化、 面向读磁盘的存储结构，组织的投影。 The ROS 大量使用了压缩和索引. 你能够使用 COPY&hellip;DIRECT and INSERT (with /<em>+direct</em>/ hint)语句直接加载数据到 ROS.</p>

<h2>物理架构</h2>

<p>在传统数据库中，数据被保存在表中, 使用索引和物化视图等结构 用来提高查询性能. 对比来说, HP Vertica中tables不占用任何存储空间. 替代的是 由表中列的集合（projections）组成。</p>

<p>使用 projections 带来如下的好处:</p>

<p>l  Projections压缩和编码数据，大大减少存储数据所需的空间.此外
HP Vertica 对编码的数据操作尽可能避免解码的成本。这种组合（压缩和编码）下查询性能最大化的同时优化磁盘空间.</p>

<p>l 可以根据Projections的大小进行分段或复制整个数据库节点. 比如, 对于大表的Projections可以分割和分布在所有节点. 对于小表的未分段的Projections可以在数据库中的所有节点间复制.</p>

<p>l  Projections对 SQL 的最终用户是透明的. The HP Vertica 查询优化器自动选择最优的Projections.</p>

<p>l Projections此外提供了高可用性和恢复性. 为了保证高可用性和恢复性, HP Vertica在至少 K + 1 群集中的节点上重复表的列数据. 然而,如果在 K-Safe 环境中一个机器失效, 数据库可以继续运行并使用其余节点上重复数据. 一旦该节点恢复正常运作，它通过查询其他节点自动将恢复其数据和丢失的东西。</p>

<h3>Projection概念</h3>

<p>对于数据库中的每一个表, HP Vertica 需要至少一个projection, 该projection叫做 superprojection. superprojection是针对于一个表的，并包含该表的所有列。这样, HP Vertica 保证所有的SQL查询都能够被应答.
除了 superprojections，您可以通过创建包含表中的部分列的projection，通过一个或多个projection优化您的查询。这些projection被称为查询具体的projection。</p>

<h3>使用Projections保持高可用</h3>

<p> | 复制小的, 未分割的 projections</p>

<p>|  对大的、分割的projections创建 buddy projections</p>

<h4>Replication (Unsegmented Projections)</h4>

<p>当创建 projections时, 对它们进行复制，创建和存储在数据库中的所有节点上重复这些projections.</p>

<p>下图演示了两个projections, B 和 C, 被复制到三个节点.</p>

<p><img src="images/projection1.png" alt="投影" /></p>

<h4>Buddy Projections (分割的 Projections)</h4>

<p>HP Vertica 创建 buddy projections, 它们是segmented projections 的拷贝，分布在所有节点。 确保  包含相同数据的段被分配在不同的节点. 这意味着如何一个节点失败,所有的数据在其他节点可恢复. HP Vertica使用offsets分布段到不同的节点. 例如，包括第一好友投影 (A_BP1) 距离投影A一个节点和从第二个好友投影 (A_BP2) 段距离投影A两个节点。</p>

<p>下图演示了分割的 projection  A 及其buddy projections, A_BP1 and A_BP2, 分布在三个节点上.
<img src="images/projection2.png" alt="投影" /></p>

<p>下面的插图显示 HP Vertica 如何使用偏移量来确保每个节点都有一套完整的数据的投影
<img src="images/projection3.png" alt="投影" /></p>

<p>此示例阐释如何一个投影和跨节点分割其好友投影。然而，每个节点可以存储从各种投影线段的集合。</p>

<h4>Projections如何被创建</h4>

<p>Vertica 建议加载您的数据的示例，然后运行数据库设计器来创建优化的projection。数据库设计器创建新的projection，以基于其数据统计和查询优化您的数据库. 创建的步骤:</p>

<ol>
<li><p>分析您的逻辑架构、 示例数据和示例查询(可选的)</p></li>
<li><p>以SQL脚本的形式，创建一个物理架构设计 (投影)，并可以自动或手动部署</p></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Linux-learn]]></title>
    <link href="http://musicpop.github.io/blog/2015/08/20/linux-learn/"/>
    <updated>2015-08-20T16:45:44+08:00</updated>
    <id>http://musicpop.github.io/blog/2015/08/20/linux-learn</id>
    <content type="html"><![CDATA[<p>bash使用中创建变量，变量是区分大小写的</p>

<h2>grep 命令</h2>

<p>grep搜索包含特定模式的文本行，可以在一个或多个文本中搜索。
也可以在输入流中搜索。</p>

<h3>基本的语法是：</h3>

<pre><code>grep pattern filename(或者grep "pattern" filename)
this is the line containing pattern
</code></pre>

<p>grep后可以加一些常用的选项，包括:</p>

<ul>
<li>-c：只输出匹配行的计数。</li>
<li>-I：不区分大小写(只适用于单字符)。</li>
<li>-h：查询多文件时不显示文件名。</li>
<li>-l：查询多文件时只输出包含匹配字符的文件名。</li>
<li>-n：显示匹配行及行号。</li>
<li>-s：不显示不存在或无匹配文本的错误信息。</li>
<li>-v：显示不包含匹配文本的所有行。</li>
</ul>


<h3>grep 与grep -E（也就是egrep）的区别：</h3>

<p>例1，grep命令也可以使用正则表达式来做字符串的匹配，
但需要加转义字符。
为了查找多个字符，可以使用命令：</p>

<pre><code>     [root@devops ~]# grep 'user1\|user2\|user3' /etc/passwd
    user1:x:501:501::/home/user1:/bin/bash
    user1add:x:503:503::/home/user1add:/bin/bash
    user2:x:504:504::/home/user2:/bin/bash
    user3:x:505:505::/home/user3:/bin/bash
</code></pre>

<p>例2，grep命令的扩展版本egrep，带有更复杂的正则表达式元字符，对于以上例子，如果使用egrep，那么可以省略转义字符，如下：</p>

<pre><code>[root@devops ~]# egrep 'user1|user2|user3' /etc/passwd
user1:x:501:501::/home/user1:/bin/bash
user2:x:504:504::/home/user2:/bin/bash
user3:x:505:505::/home/user3:/bin/bash
</code></pre>

<h3>grep还可以在多级目录中对文本进行递归搜索</h3>

<p><code>grep "text" . -R -n</code></p>

<h3>grep 搜索中指定(include)或排除(exclude)文件</h3>

<p>目录中递归搜索所有的.c和.cpp文件</p>

<p><code>grep "main()" . -r --include *.{c,cpp}</code></p>

<p>在搜索中排除所有的README文件</p>

<p><code>grep "main()" . -r --exclude "README"</code></p>

<p>如果要排除目录，使用&ndash;exclude-dir选项</p>

<h3>有时候，我们不打算查看匹配的字符串，而只是想知道是否能够成功匹配。</h3>

<p>可以使用grep的静默选项（-q）来实现，
如果命令运行成功会返回0，如果失败则返回非0值</p>

<h2>find命令</h2>

<p>工作原理：沿着文件层次结构向下遍历，匹配符合条件的文件。
执行相应的操作。例如，列出base_path目录下的所有文件和文件夹：</p>

<p><code>find base_path</code></p>

<p>再例如：</p>

<p><code>find . -print</code></p>

<p>-print指明打印匹配文件的文件名时，&#8217;\n&#8217;对输出的文件名进行分隔。
-print0指明使用&#8217;\0&#8217;作为匹配的文件名之间的分隔符，也就是不换行。</p>

<h3>根据文件名进行搜索</h3>

<p>使用-name选项，后跟文件名或者包含通配符的文件名</p>

<h3>根据路径名进行搜索</h3>

<p>使用-path选项，将文件路径作为一个整体进行匹配</p>

<h3>基于目录深度的搜索</h3>

<p>大多数情况下，我们只需要在当前目录下搜索，无需再继续向下搜索。
这时使用深度选项来限制。深度设置为1表示在当前目录下查找，以此类推。
使用-maxdepth指定最大深度，使用-mindepth指定最小深度。</p>

<p>例如：</p>

<p><code>find . -maxdepth 1 -name "f*"　-print</code></p>

<h3>根据文件类型进行搜索</h3>

<p><code>find . -type d -pring</code></p>

<p>其中：普通文件的类型为f
      符合链接的类型为l
      目录的类型为    d
      字符设备的类型为c
      块设备的类型为  b
      套接字的类型为  s
      FIFO的类型为    p</p>

<h3>根据文件时间进行搜索</h3>

<p>Linux文件系统中的文件都有三种时间戳：</p>

<ul>
<li>1 访问时间（）：用户最近一次访问文件的时间</li>
<li>2 修改时间（）：文件内容最后一次被修改的时间</li>
<li>3 变化时间（）：文件元数据（）最后一次改变的时间</li>
<li><p>例如：打印出访问时间超所7天的所有文件</p></li>
</ul>


<p><code>find . -type f -atime +7 -print</code></p>

<p>其中指定-atime选项时，单位是天，参数值带有-表示小于，+表示大于，不带有符合表示当天。</p>

<h3>根据文件大小的搜索</h3>

<p>使用-size选项：</p>

<p><code>find . -type f -size +2k</code></p>

<h3>删除匹配的文件</h3>

<p>-delete可以用来删除查找到的文件</p>

<p><code>find . -type f -name "*.swap" -delete</code></p>

<h3>基于文件权限和所有权进行匹配</h3>

<p>-perm 匹配特定的权限值</p>

<p><code>find -type f -name "*.java" ! -perm 644</code></p>

<p>上面的例子，找出没有设置好权限的文件-user 选项找出特定用户所拥有的文件</p>

<p><code>find . -type f -user peng -print</code></p>

<h3>find与-exec结合</h3>

<p>我们查找出来的内容，不只是看一下而已，还会有进一步的操作，这时候-exec的作用就体现出来了。-exec 后面只能接受单个命令，{}表示查找出的文件名。以<code>;</code>结束，为了考虑各个系统<code>;</code>会有不同的意义,所以在前面加反斜杠。例如：</p>

<p><code>find . -type f -name "*.txt" -exec printf "Text file: %s\n" {} \;</code></p>

<p>如果后面要接多个参数，可以把多个命令写到一个shell脚本中。例如：</p>

<p><code>-exec ./command.sh {} \;</code></p>

<h3>find排除目录及文件</h3>

<p>-prune 选项，就表示，不寻找字符串作为寻找文件或目录的范本样式。
例如：</p>

<pre><code>ls -l

total 4

drwxrwxr-x. 2 peng peng 4096 Oct 12 17:10 fold1

`-rw-rw-r--. 1 peng peng    0 Oct 12 16:34 t1.txt

`-rw-rw-r--. 1 peng peng    0 Oct 12 16:35 t2.txt

`-rw-rw-r--. 1 peng peng    0 Oct 12 17:10 test.git

[peng@localhost learn]$ find . -path "./fold1"
/fold1

[`peng@localhost learn]$ find . -path "./fold1" -prune`
./fold1`
</code></pre>

<p>find . -path &ldquo;./fold1&rdquo; 是基本的查询命令。-prone就像一个判断语句,当发现-prune前面的表达式match时，返回真。</p>

<p><code>[peng@localhost learn]$ find . -path "./fold1" -prune -o -print</code>
<code>.</code>
<code>./t1.txt</code>
<code>./t2.txt</code>
<code>./test.git</code></p>

<p>当使用-o选项，表示逻辑或。如果其前返回真，则不执行后面的-print</p>

<p>如果其前返回假，则会执行-print并输出不包含./fold1的目录。</p>

<p>注意：-a 应该是and的缩写，意思是逻辑运算符‘或’(&amp;&amp;); -o应该是or的缩写,意思是逻辑运算符‘与’(||), -not 表示非.
比较下面的代码：</p>

<p>默默地</p>

<p><code>[peng@localhost learn]$ find . -path "./fold1" -prune -a -print</code></p>

<p><code>./fold1</code></p>

<h2>xargs命令</h2>

<p>为什么要使用xargs命令呢？我们可以使用管道将一个命令的stdout
重定向到另一个命令。例如</p>

<p><code>cat foo.txt | grep "test"</code></p>

<p>但是有些命令只能使用命令的参数接受数据，而无法通过stdin接收数据流。
那么，我们就设法用管道提供那些只有命令行参数需要的数据。
xargs命令将标准输入数据转换成命令行参数。
基本的语法是：</p>

<p><code>command | xargs</code></p>

<h3>第一步把stdin接收的数据重新格式化</h3>

<h3>第二步将其作为参数提供给其他命令</h3>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Idea-14-show-column-number-shortcutkey]]></title>
    <link href="http://musicpop.github.io/blog/2015/08/18/idea-14-show-column-number-shortcutkey/"/>
    <updated>2015-08-18T08:17:17+08:00</updated>
    <id>http://musicpop.github.io/blog/2015/08/18/idea-14-show-column-number-shortcutkey</id>
    <content type="html"><![CDATA[<h1>如何在Idea14中显示行号</h1>

<p><img src="images/column-number.png" alt="显示行号" /></p>

<h1>Idea常用快捷键汇总</h1>

<h2>找文件找代码找引用相关</h2>

<ol>
<li>双击shift   在项目的所有目录查找</li>
<li>ctrl+f    当前文件查找特定内容</li>
<li>ctrl+shift+f  find in path</li>
<li>ctrl+n    查找类</li>
<li>ctrl+shift+n 查找文件</li>
<li>ctrl+e 最近的文件</li>
<li><p>alt+F7
可以帮你找到你的函数或者变量或者类的所有引用到的地方</p>

<h2>编辑相关</h2></li>
<li><p>shift+enter 另起一行</p></li>
<li><p>ctrl+r 当前文件替换特定内容</p></li>
<li><p>ctrl+shift+r 当前项目替换特定内容</p></li>
<li><p>shift+F6 可以重命名你的类、方法、变量等等，而且这个重命名甚至可以选择替换掉注释中的内容</p></li>
<li><p>ctrl+d 复制当前行到下一行</p></li>
<li><p>ctrl+x 剪切当前行</p></li>
<li><p>ctrl+c \ ctrl+v 大家都懂的</p></li>
<li><p>ctrl+z 撤销</p></li>
<li><p>ctrl+shift+z 取消撤销</p></li>
<li><p>ctrl+k 提交代码到SVN</p></li>
<li><p>ctrl+t 更新代码</p></li>
<li><p>alt+insert
在类中使用：可以自动生成构造器、getter/setter等等常用方法
  在项目目录上使用：可用于新建各种文件。</p></li>
<li>ctrl+alt+L
  自动格式化代码，我已经养成了写完代码就来一发的习惯。</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Maven]]></title>
    <link href="http://musicpop.github.io/blog/2015/06/10/maven/"/>
    <updated>2015-06-10T08:32:11+08:00</updated>
    <id>http://musicpop.github.io/blog/2015/06/10/maven</id>
    <content type="html"><![CDATA[<p>Maven笔记：
一，  主要命令
a)  Mvn clean compile
b)  Mvn clean test
c)  Mvn clean package
d)  Mvn clean install
执行test前会执行compile，执行package前会执行test，执行install前会执行package
二，  安装时compiler can not be resolved
因为公司里使用代理上网，配置maven的conf\setting添加
<proxy>
      <id>optional</id>
      <active>true</active>
      <protocol>http</protocol>
      <host>proxy1.sg.*.com</host>
      <port>81</port>
      <nonProxyHosts>local.net|some.host.com</nonProxyHosts>
    </proxy></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Spring-boot]]></title>
    <link href="http://musicpop.github.io/blog/2015/06/08/spring-boot/"/>
    <updated>2015-06-08T12:00:38+08:00</updated>
    <id>http://musicpop.github.io/blog/2015/06/08/spring-boot</id>
    <content type="html"><![CDATA[<p>Spring Boot用来创建独立的Java应用程序，并接可以用java -jar命令运行，也可创建传统的WAR文件。由于Spring使用了大量的XML配置文件以及复杂的依赖管理，这一点饱受非议。而Spring Boot充分利用了JavaConfig的配置模式以及“约定优于配置”的理念，能够极大的简化基于Spring MVC的Web应用和REST服务的开发。 Spring Boot 简化了部署的过程，其内嵌了Tomcat和Jety。 使用gradle和maven构建 使用时只需将org.springframework.boot设置为父项目 *如果想生成War包，并部署到外部容器，
参考<a href="http://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/#build-tool-plugins-maven-packaging">http://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/#build-tool-plugins-maven-packaging</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[软件系统架构读书笔记]]></title>
    <link href="http://musicpop.github.io/blog/2014/11/03/ruan-jian-xi-tong-jia-gou-du-shu-bi-ji/"/>
    <updated>2014-11-03T16:55:05+08:00</updated>
    <id>http://musicpop.github.io/blog/2014/11/03/ruan-jian-xi-tong-jia-gou-du-shu-bi-ji</id>
    <content type="html"><![CDATA[<h2>软件架构概念</h2>

<h3>系统的架构是一系列基本概念或者系统在其环境变量中变现出来的属性，体现在它的元素、关系以及设计和发展的原则中。</h3>

<p>系统架构还涉及到利益相关者，包括软件使用者、开发者、提供支持、部署或者为其付钱的人。架构师的工作就是与大量不同的利益相关者，协同工作，满足他们的关注点，管理并激励他们，获得他们的意见。从而形成了另外的概念视点和视角。以后在详细介绍这两个概念。</p>

<h3>软件的元素和关系</h3>

<h4>任何一个系统都是由许多部分组成的，这些部分称为模块、组件、部件或者子系统。我们遵循ISO标准，使用大家不太熟悉但在语义上中立的术语元素，来表示组成系统的部分。系统结构分为静态结构和动态结构。</h4>

<h3>系统的基本属性</h3>

<h4>系统的基本属性表现为两种不同的方式：外部可见行（系统所做的工作）和质量属性（系统如何完成工作）。</h4>

<p>1）系统的外部可见行为定义了系统和环境之间的功能交互。
2）质量属性是系统外部可见性，非功能性的属性，例如性能、安全或者可伸缩性。</p>

<h3>设计和发展的原则</h3>

<h4>对于一个结构良好、可维护的系统来说，有一种情况显而易见，就是它的实现是一致的。在架构设计的情景中，我们对架构原则进行定义：对指引架构定义的看法、方法或者意图的基本声明。</h4>

<h3>架构元素：构建系统的基本组成部分。</h3>

<p>应拥有一下关键属性：
*  一系列清晰定义的责任
*  清晰定义的边界
*  清晰定义的接口，它会定义元素为其他架构元素所提供的服务。</p>

<h3>利益相关者：可能是个人、团队或者组织</h3>

<h4>关注和兴趣点</h4>

<p>当你开始创建架构的时候，会发现你处理的是发现的过程，而不是捕获的过程，换言之，在系统开发生命周期早期过程中，你的利益相关者很可能无法精确描述出他的需求是什么。</p>

<h4>质量三角形:成本、质量、时间</h4>

<p>架构师的职责就是要知道哪些属性对于那些人重要，并在必要的时候达成一种可接受的折中方案。</p>

<h4>利益相关者的重要性</h4>

<h3>架构描述</h3>

<p>是一系列产出物，它会以利益相关者能够理解的形式编写架构的文档，并说明架构如何满足他们的关注点，
“产出物”包括很多，不仅是架构模型，还有范围定义、约束和原则。
必须能够提供能够总结这个系统的整体概况，还必须分解为能够验证的、足够细的详细内容，并且所描述的系统能够基于此构建。</p>

<h4>所有利益相关者都需要理解与之相关的架构。</h4>

<h3>核心概念之间的关系（图示）</h3>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[根据端口号查找进程]]></title>
    <link href="http://musicpop.github.io/blog/2014/09/17/gen-ju-duan-kou-hao-cha-zhao-jin-cheng/"/>
    <updated>2014-09-17T21:00:18+08:00</updated>
    <id>http://musicpop.github.io/blog/2014/09/17/gen-ju-duan-kou-hao-cha-zhao-jin-cheng</id>
    <content type="html"><![CDATA[<p> lsof -Pnl +M -i4 | grep 20880</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[GCC and Make]]></title>
    <link href="http://musicpop.github.io/blog/2014/09/17/gcc-and-make/"/>
    <updated>2014-09-17T16:10:27+08:00</updated>
    <id>http://musicpop.github.io/blog/2014/09/17/gcc-and-make</id>
    <content type="html"><![CDATA[<p>&emsp;&emsp;GCC 开始是Gun C Complier，后来由于加入各种语言支持，能够编译java,c++等。慢慢演变为Gun Complier Collection。这节的内容包括Gcc介绍，Makefile介绍，GDB应用,Eclipse集成环境。</p>

<h2>Gcc编译过程</h2>

<p>*预处理：gcc -E main.c -o main.i</p>

<p>*编译  ：gcc -S main.i -o main.s</p>

<p>*汇编  ：gcc -c main.s -o main.o</p>

<p>*链接  ：gcc main.o -o main</p>

<h2>调试</h2>

<p>*编译文件并加入调试信息 gcc -O crash.c -o crash</p>

<p>*使用gdb调试 gdb crash</p>

<p>*加入断点 b 3</p>

<p>*开始调试 run</p>

<p>next 执行一行源码但不进入函数内部</p>

<p>step 执行一行源码且进入函数内部</p>

<p>continue 继续执行</p>

<p>quit 终止</p>

<h2>GCC编译过程中需要的库依赖</h2>

<p>-头文件
    搜索的路径包括：C_INCLUDE_PATH  CPLUS_INCLUDE_PATH OBJ_INCLUDE_PATH</p>

<pre><code>通过-l选项添加搜索目录
</code></pre>

<p>-静态库</p>

<pre><code>通过-L选项添加搜索目录

使用环境变量LD_LIBRARY_PATH
</code></pre>

<p>-动态库</p>

<pre><code>a.把库拷贝到/usr/lib，/lib，/usr/local/lib目录下

b.添加库路径到LD_LIBRARY_PATH

c.修改/etc/ld.so.conf文件，把库文件所在的目录放在文件末尾，并执行ldconfig刷新
</code></pre>

<h2>如何生成动态库</h2>

<p>*gcc -c main.c xiangjia.c xiangjian.c   生成.o文件</p>

<p>*此时执行gcc main.o -o main会出错，提示没有定义xiangjia 和 xiangjian</p>

<p>*ar cr libmath56.a xiangjia.o xiangjian.o 此时生成.a文件</p>

<p>*gcc main.o -o main libmath56.a 这个时候运行成功，生成main文件</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[第一篇博客]]></title>
    <link href="http://musicpop.github.io/blog/2014/09/15/my-first-octopress-blog/"/>
    <updated>2014-09-15T16:35:52+08:00</updated>
    <id>http://musicpop.github.io/blog/2014/09/15/my-first-octopress-blog</id>
    <content type="html"><![CDATA[<h1>shell命令，kde，gnome</h1>

<pre><code>&gt;引用蔡老师的话，首先要做人，技术只是吃饭的本领。
</code></pre>

<p>*shell命令行显示</p>

<pre><code>'''[mysql@rh19 ~]$

[root@rh19 root]#'''
</code></pre>

<p>*shell通配符</p>

<pre><code>**

*.

*?
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Title]]></title>
    <link href="http://musicpop.github.io/blog/2014/09/13/title/"/>
    <updated>2014-09-13T02:38:39+08:00</updated>
    <id>http://musicpop.github.io/blog/2014/09/13/title</id>
    <content type="html"><![CDATA[
]]></content>
  </entry>
  
</feed>
